// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  dUsername     String
  dAvatar       String?
  dClientId     String   @unique
  dLocale       String?
  dAccessToken  String
  dRefreshToken String
  isPremium     Boolean  @default(false)
  servers       Server[]
  matches       Match?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Server {
  id           Int              @id @default(autoincrement())
  dGuildId     String           @unique
  dOwnerId     String
  owner        User             @relation(fields: [dOwnerId], references: [dClientId])
  name         String
  settings     ServerSetting?
  guildMatches ServerUserMatch[]
  matches      Match?
  modules      ServerModule?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Module {
  id                 Int           @id @default(autoincrement())
  name               String
  description        String
  isPremium          Boolean       @default(false)
  defaultPermissions Json
  serversModule      ServerModule?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model ServerSetting {
  id               Int      @id @default(autoincrement())
  dGuildId         String   @unique
  server           Server   @relation(fields: [dGuildId], references: [dGuildId])
  botNicName       String?  @default("xBot")
  botCommandPrefix String   @default("*")
  isBotActive      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Match {
  id             Int          @id @default(autoincrement())
  serverOwnerId  String       @unique
  dGuidId       String       @unique
  xBotUser       User         @relation(fields: [serverOwnerId], references: [dClientId])
  xBotServer     Server       @relation(fields: [dGuidId], references: [dGuildId])
  lastMatchDate  DateTime
  nextMatchDate  DateTime
  matchChannelId String @default("")
  matchFrequency Int          @default(7)
  status         MATCH_STATUS
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ServerUserMatch {
  id             Int      @id @default(autoincrement())
  dGuildId       String   
  xBotServer     Server   @relation(fields: [dGuildId], references: [dGuildId])
  dUserId        String
  dUserMatchedId String
  isMatchActive  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ServerModule {
  id                Int      @id @default(autoincrement())
  dGuildId          String   @unique
  xBotServer        Server   @relation(fields: [dGuildId], references: [dGuildId])
  xBotModuleId      Int      @unique
  xBotModule        Module   @relation(fields: [xBotModuleId], references: [id])
  isActive          Boolean  @default(false)
  modulePermissions Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum MATCH_STATUS {
  ACTIVE
  PAUSED
  FAILED
}
